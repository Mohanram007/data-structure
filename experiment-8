// Definition for singly-linked list.
struct ListNode {
    char val;
    ListNode* next;
    ListNode(char x) : val(x), next(NULL) {}
};

class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if (head == NULL || head->next == NULL) return true;

        // Find the end of the first half and the start of the second half
        ListNode* firstHalfEnd = endOfFirstHalf(head);
        ListNode* secondHalfStart = reverseList(firstHalfEnd->next);

        // Check whether the list is a palindrome
        ListNode* p1 = head;
        ListNode* p2 = secondHalfStart;
        bool result = true;
        while (result && p2!= NULL) {
            if (p1->val!= p2->val) result = false;
            p1 = p1->next;
            p2 = p2->next;
        }

        // Restore the list and return the result
        firstHalfEnd->next = reverseList(secondHalfStart);
        return result;
    }

private:
    ListNode* endOfFirstHalf(ListNode* head) {
        ListNode* slow = head;
        ListNode* fast = head;
        while (fast->next!= NULL && fast->next->next!= NULL) {
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }

    ListNode* reverseList(ListNode* head) {
        ListNode* prev = NULL;
        ListNode* curr = head;
        while (curr!= NULL) {
            ListNode* nextTemp = curr->next;
            curr->next = prev;
            prev = curr;
            curr = nextTemp;
        }
        return prev;
    }
};
